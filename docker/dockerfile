FROM yubaoliu/root:ros-cuda10.0-cudnn7-ubuntu18.04

RUN apt update \
    &&  apt install -f \
    && apt install -y  libglew-dev \
       libxkbcommon-dev \
       cmake-qt-gui \
       libgoogle-glog-dev \
       ros-melodic-octomap-ros

## update pip
RUN curl -kL https://bootstrap.pypa.io/get-pip.py | python  \
    && curl -kL https://bootstrap.pypa.io/get-pip.py | python3 
 
## coco API
RUN pip2 install git+https://github.com/philferriere/cocoapi.git#subdirectory=PythonAPI
RUN pip3 install git+https://github.com/philferriere/cocoapi.git#subdirectory=PythonAPI

# Install mask rcnn dependencies
COPY requirements.txt /root/requirements.txt
RUN  pip2 install  -r /root/requirements.txt --ignore-installed enum34
RUN  pip3 install  -r /root/requirements.txt

# Download Maskrcnn modle
RUN mkdir /root/cnnmodel \
    && cd /root/cnnmodel \
    && wget -c https://github.com/matterport/Mask_RCNN/releases/download/v1.0/mask_rcnn_coco.h5

#Pangolin
RUN git clone https://github.com/stevenlovegrove/Pangolin.git \
    && cd Pangolin \
    && mkdir build \
    && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Debug \
    && make -j 3 \
    && make install

# Sophus
RUN git clone https://github.com/yubaoliu/Sophus.git \
    && cd Sophus \
    && git checkout master \
    && mkdir build \
    && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Debug \
    && make -j3 \
    && make install 


## Sophus: non templated version
#RUN git clone https://github.com/yubaoliu/Sophus.git \
#    && cd Sophus \
#    && git checkout non-templated \
#    && mkdir build \
#    && cd build \
#    && cmake .. -DCMAKE_BUILD_TYPE=Debug \
#    && make -j3 \
#    && make install 

# G2O
RUN git clone https://github.com/yubaoliu/g2o.git \
    && cd g2o \
    && mkdir build \
    && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Debug \
    && make -j 3 \
    && make install \
    && cmake .. -DCMAKE_BUILD_TYPE=Release \
    && make -j 3 \
    && make install

# TUM Benchmark
#RUN cd /root \
#    && svn checkout https://svncvpr.in.tum.de/cvpr-ros-pkg/trunk/rgbd_benchmark/rgbd_benchmark_tools

# # Install dependencies
# # Newer CUDA was installed in base image, so rosdep keys of CUDA are skipped
# RUN /bin/bash -c "source /opt/ros/melodic/setup.bash && \
#                   rosdep install --from-paths src -r -y --skip-keys=\"nvidia-cuda-dev nvidia-cuda\""
#                   
# # Build
# RUN /bin/bash -c "source /opt/ros/melodic/setup.bash && \
#                   catkin_make -DCMAKE_BUILD_TYPE=Release"
 
# # Load ROS environment at each run
COPY ./ros_entrypoint.sh /
RUN chmod 755 /ros_entrypoint.sh
ENTRYPOINT ["/ros_entrypoint.sh"]

CMD ["bash"]

WORKDIR /root/catkin_ws/src
